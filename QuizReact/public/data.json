[
  {
    "id": 1,
    "question": "¿Qué es un Closure en JavaScript?",
    "code": "function crearContador() {\n  let contador = 0;\n  return function() {\n    contador += 1;\n    return contador;\n  }\n}\nconst contador1 = crearContador();\nconsole.log(contador1());",
    "answers": [
      "Una función que recuerda el ámbito en el que fue creada",
      "Una función que se ejecuta de inmediato",
      "Un método para crear clases",
      "Un evento de JavaScript"
    ],
    "correctAnswer": 0
  },
  {
    "id": 2,
    "question": "¿Qué devuelve el método map en JavaScript?",
    "code": "const numeros = [1, 2, 3, 4];\nconst resultado = numeros.map(num => num * 2);\nconsole.log(resultado);",
    "answers": ["[2, 4, 6, 8]", "[1, 2, 3, 4]", "undefined", "[4, 3, 2, 1]"],
    "correctAnswer": 0
  },
  {
    "id": 3,
    "question": "¿Cómo se puede crear una promesa que se resuelve después de 2 segundos?",
    "code": "function esperar(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nesperar(2000).then(() => console.log('Pasaron 2 segundos'));",
    "answers": [
      "setTimeout(resolve, 2000)",
      "new Promise((resolve, reject) => setTimeout(resolve, 2000))",
      "new Promise(resolve => setTimeout(resolve, 2000))",
      "Promise.resolve(setTimeout(() => {}, 2000))"
    ],
    "correctAnswer": 2
  },
  {
    "id": 4,
    "question": "¿Qué método se utiliza para combinar dos arrays sin modificar los originales?",
    "code": "const array1 = [1, 2];\nconst array2 = [3, 4];\nconst resultado = array1.concat(array2);\nconsole.log(resultado);",
    "answers": ["push()", "concat()", "splice()", "unshift()"],
    "correctAnswer": 1
  },
  {
    "id": 5,
    "question": "¿Cuál es el resultado de la siguiente comparación en JavaScript?",
    "code": "console.log(0 == false);\nconsole.log(0 === false);",
    "answers": ["true, true", "false, true", "true, false", "false, false"],
    "correctAnswer": 2
  },
  {
    "id": 6,
    "question": "¿Cómo se evita que un objeto sea modificado?",
    "code": "const obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);",
    "answers": ["2", "1", "undefined", "null"],
    "correctAnswer": 1
  },
  {
    "id": 7,
    "question": "¿Cómo se copia un objeto sin conservar la referencia al original?",
    "code": "const original = { a: 1, b: 2 };\nconst copia = { ...original };\ncopia.a = 3;\nconsole.log(original.a);",
    "answers": ["1", "3", "undefined", "null"],
    "correctAnswer": 0
  },
  {
    "id": 8,
    "question": "¿Cómo se puede manejar errores en promesas?",
    "code": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));",
    "answers": ["then()", "catch()", "finally()", "try{} catch{}"],
    "correctAnswer": 1
  },
  {
    "id": 9,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "const obj = { a: 1, b: 2 };\nconst keys = Object.keys(obj);\nconsole.log(keys);",
    "answers": ["['a', 'b']", "[1, 2]", "['a', 'b', 'a', 'b']", "['1', '2']"],
    "correctAnswer": 0
  },
  
  {
    "id": 10,
    "question": "¿Cuál es el resultado de 2 + '2' en JavaScript?",
    "code": "2 + '2';",
    "answers": ["'22'", "4", "NaN", "Error"],
    "correctAnswer": 0
  }
]
